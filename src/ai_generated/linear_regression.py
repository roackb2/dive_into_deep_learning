"""
Following content is generated by ChatGPT o1-preview.
prompt: Write a python implementation of linear regression without using pytorch or tensorflow
"""

import numpy as np

class LinearRegression:
    def __init__(self, fit_intercept=True):
        """
        Linear Regression model.

        Parameters:
        fit_intercept (bool): Whether to calculate the intercept for this model. If set to False, no intercept will be used in calculations.
        """
        self.fit_intercept = fit_intercept
        self.coef_ = None       # Coefficients (weights) of the features
        self.intercept_ = None  # Intercept term

    def fit(self, X, y):
        """
        Fit linear model.

        Parameters:
        X (array-like): Training data of shape (n_samples, n_features)
        y (array-like): Target values of shape (n_samples,)
        """
        X = np.array(X)
        y = np.array(y)

        if self.fit_intercept:
            # Add a column of ones to include the intercept in the model
            ones = np.ones(shape=(X.shape[0], 1))
            X = np.concatenate([ones, X], axis=1)

        # Compute the coefficients using the Normal Equation
        X_transpose = X.T
        XTX = X_transpose.dot(X)
        XTy = X_transpose.dot(y)

        # Check if XTX is invertible
        if np.linalg.det(XTX) == 0.0:
            raise Exception("Singular matrix detected. Cannot compute inverse.")

        beta = np.linalg.inv(XTX).dot(XTy)

        if self.fit_intercept:
            self.intercept_ = beta[0]
            self.coef_ = beta[1:]
        else:
            self.intercept_ = 0
            self.coef_ = beta

    def predict(self, X):
        """
        Predict using the linear model.

        Parameters:
        X (array-like): Samples of shape (n_samples, n_features)

        Returns:
        y_pred (array-like): Predicted values of shape (n_samples,)
        """
        X = np.array(X)

        if self.fit_intercept:
            # Add a column of ones to include the intercept in the predictions
            ones = np.ones(shape=(X.shape[0], 1))
            X = np.concatenate([ones, X], axis=1)
            beta = np.concatenate(([self.intercept_], self.coef_))
        else:
            beta = self.coef_

        return X.dot(beta)


def test_linear_regression():
  # Sample data
  X = [[1], [2], [3], [4], [5]]
  y = [3, 5, 7, 9, 11]

  # Create and fit the model
  model = LinearRegression()
  model.fit(X, y)

  # Display the learned parameters
  print("Intercept:", model.intercept_)
  print("Coefficients:", model.coef_)

  # Make predictions
  X_new = [[6], [7]]
  predictions = model.predict(X_new)
  print("Predictions:", predictions)

test_linear_regression()
